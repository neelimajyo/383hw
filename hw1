# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import sys
import puzz
import pdqpq


MAX_SEARCH_ITERS = 100000
GOAL_STATE = puzz.EightPuzzleBoard("012345678")


def solve_puzzle(start_state, strategy):
    """Perform a search to find a solution to a puzzle.
    
    Args:
        start_state: an EightPuzzleBoard object indicating the start state for the search
        flavor: a string indicating which type of search to run.  Can be one of the following:
            'bfs' - breadth-first search
            'ucost' - uniform-cost search
            'greedy-h1' - Greedy best-first search using a misplaced tile count heuristic
            'greedy-h2' - Greedy best-first search using a Manhattan distance heuristic
            'greedy-h3' - Greedy best-first search using a weighted Manhattan distance heuristic
            'astar-h1' - A* search using a misplaced tile count heuristic
            'astar-h2' - A* search using a Manhattan distance heuristic
            'astar-h3' - A* search using a weighted Manhattan distance heuristic
    
    Returns: 
        A dictionary containing describing the search performed, containing the following entries:
            'path' - a list of 2-tuples representing the path from the start state to the goal state 
                (both should be included), with each entry being a (str, EightPuzzleBoard) pair 
                indicating the move and resulting state for each action.  Omitted if the search 
                fails.
            'path_cost' - the total cost of the path, taking into account the costs associated 
                with each state transition.  Omitted if the search fails.
            'frontier_count' - the number of unique states added to the search frontier at any
                point during the search.
            'expanded_count' - the number of unique states removed from the frontier and expanded 
                (i.e. have successors generated).
    """

    results = {
        'path': [],
        'path_cost': 0,
        'frontier_count': 0,
        'expanded_count': 0,
    }
    
    if strategy == 'bfs':
        #sys.argv
        results = bfs(start_state,strategy,heuristic,results)
    elif strategy == 'ucost':
        results = ucost(start_state, strategy, heuristic,results)
    elif strategy == 'greedy':
        results = greedy(start_state, strategy, heuristic,results)
    elif strategy == 'astar':
        results = astar(start_state, strategy, heuristic,results)
    # 
    # fill in the function body here
    #
    print("RESULTS:")
    return results
####################################################################################
def backlog(log, startState):
    totalCost = 0
    path = [(log[GOAL_STATE][0],GOAL_STATE)]
    while path[-1][1] != startState:
        temp = log[path[-1][1]][1]
        x,y = temp.find('0')
        holder = int(path[-1][1]._get_tile(x,y))**2
        totalCost += holder
        if temp != startState:
            path.append((log[temp][0], temp))
        else: 
            path.append(('start', temp))
    path.reverse()
    return path, totalCost
####################################################################################
def bfs(start, strategy, results,heuristic):
    frontier_count = 1
    frontier = pdqpq.PriorityQueue()
    explored_nodes = set()
    log = {}
    frontier.add(start, heuristic(strategy,start))
   # while not is_empty(frontier):
    while len(frontier)>=1:
        #node = frontier.get_next_node() 
        node = frontier.pop()
        #if is_goal(node): 
        if node == GOAL_STATE: #base case 
        #return solution 
            results.update({'path': [("start", start)], 'path_cost': 1,'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
            return results
        #explored.add(node) 
        explored_nodes.add(node)
        #expanding nodes
        successors = node.successors()
        #for n in expand(node):
        for i in successors:
            #if (n not in frontier) 
                if (successors[i] not in frontier):
            # (n not in explored): 
                 if (successors[i] not in explored_nodes):
                    # frontier.add(i)
                     log[successors[i]] = (i, node)
                     if successors[i] == GOAL_STATE:
                          path = backlog(log, start)[0]
                          totalCost = backlog(log, start)[1]
                          results.update({'path': path, 'path_cost': totalCost,'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
                          return results
                     else:
                         frontier.add(successors[i], heuristic(strategy,successors[i]))
                         frontier_count+=1
    results.update({'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
    return results
####################################################################################
def greedy(start, strategy, heuristic,results):
    frontier_count = 1
    frontier = pdqpq.PriorityQueue()
    explored_nodes = set()
    log = {}
    frontier.add(start, heuristic(strategy,start))
    # while not is_empty(frontier):
    while len(frontier)>=1:
        #node = frontier.get_next_node() 
        node = frontier.pop()
        #if is_goal(node): 
        if node == GOAL_STATE: #base case 
        #return solution 
            path = backlog(log, start)[0]
            totalCost = backlog(log, start)[1]
            results.update({'path': path, 'path_cost': totalCost,'frontier_count':(frontier_count+1),'expanded_count':len(explored_nodes)})
            return results
        #explored.add(node) 
        explored_nodes.add(node)
        #expanding nodes
        successors = node.successors()
        #for n in expand(node):
        for i in successors:
            #if (n not in frontier) 
                if (successors[i] not in frontier):
            # (n not in explored): 
                  if (successors[i] not in explored_nodes):
                    # frontier.add(i)
                      log[successors[i]] = (i, node)
                      if successors[i] == GOAL_STATE:
                          path = backlog(log, start)[0]
                          totalCost = backlog(log, start)[1]
                          results.update({'path': path, 'path_cost': totalCost,'frontier_count':(frontier_count+1),'expanded_count':len(explored_nodes)})
                          return results
                      else:
                          frontier.add(successors[i], heuristic(strategy,successors[i]))
                          frontier_count+=1
    results.update({'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
    return results
####################################################################################
def ucost(start, strategy,heuristic,results):
    frontier_count = 1
    frontier = pdqpq.PriorityQueue()
    explored_nodes = set()
    log = {}
    #frontier.add(start, heuristic(strategy,start))
    frontier.add(start,0)
    # while not is_empty(frontier):
    while len(frontier)>=1:
        #node = frontier.get_next_node() 
        pathCost = frontier.pq[0][0]
        node = frontier.pop()
        pathCost -= heuristic(strategy,node)
        #if is_goal(node): 
        if node == GOAL_STATE: #base case 
        #return solution 
            path = backlog(log, start)[0]
            results.update({'path': path, 'path_cost': pathCost,'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
            return results
        #explored.add(node) 
        explored_nodes.add(node)
        #expanding nodes
        successors = node.successors()
        #for n in expand(node):
        for i in successors:
            x,y = node.find('0')
            holderNode = successors[i]
            node_cost = int(successors[i]._get_tile(x,y))**2
            heuristic_cost = heuristic(strategy,successors[i]) 
            temp = node_cost+pathCost+heuristic_cost
            #if (n not in frontier) 
            if (successors[i] not in frontier):
            # (n not in explored): 
                if (successors[i] not in explored_nodes):
                    # frontier.add(i)  
                    frontier_count+=1
                    frontier.add(holderNode,temp)
                    log[holderNode] = (i,node)
            elif (successors[i] in frontier):
                if(not frontier.get(holderNode) <=  temp):
                    frontier.entry_finder[successors[i]][0] =  temp
                    backlog[holderNode] = (i, node)
    results.update({'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
    return results
####################################################################################
def astar(start, strategy, heuristic,results):
    frontier_count = 1
    frontier = pdqpq.PriorityQueue()
    explored_nodes = set()
    log = {}
    #frontier.add(start, heuristic(strategy,start))
    frontier.add(start,0)
    # while not is_empty(frontier):
    while len(frontier)>=1:
        #node = frontier.get_next_node() 
        pathCost = frontier.pq[0][0]
        node = frontier.pop()
        pathCost -= heuristic(strategy,node)
        #if is_goal(node): 
        if node == GOAL_STATE: #base case 
        #return solution 
            path = backlog(log, start)[0]
            results.update({'path': path, 'path_cost': pathCost,'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
            return results
        #explored.add(node) 
        explored_nodes.add(node)
        #expanding nodes
        successors = node.successors()
        #for n in expand(node):
        for i in successors:
            x,y = node.find('0')
            holderNode = successors[i]
            node_cost = int(successors[i]._get_tile(x,y))**2
            heuristic_cost = heuristic(strategy,successors[i]) 
            temp = node_cost+pathCost+heuristic_cost
            #if (n not in frontier) 
            if (successors[i] not in frontier):
            # (n not in explored): 
                if (successors[i] not in explored_nodes):
                    # frontier.add(i)  
                    frontier_count+=1
                    frontier.add(holderNode,temp)
                    log[holderNode] = (i,node)
            elif (successors[i] in frontier):
                if(not frontier.get(holderNode) <=  temp):
                    frontier.entry_finder[successors[i]][0] =  temp
                    backlog[holderNode] = (i, node)
    results.update({'frontier_count':frontier_count,'expanded_count':len(explored_nodes)})
    return results
####################################################################################
def heuristic(strategy,state):
    if strategy == 'greedy-h1':
        stat = '012345678'
        state_str = state.__str__()
        count = 0
        for s1 in stat:
            for i in state_str:
                if(s1 != '0'):
                    if(s1 != i):
                        count+=1
        return count
    
    elif strategy == 'astar-h1':
        stat = '012345678'
        state_str = state.__str__()
        count = 0
        for s1 in stat:
            for i in state_str:
                if(s1 != '0'):
                    if(s1 != i):
                        count+=1
        return count
    
    elif strategy == 'greedy-h3' or strategy == 'astar-h3':
        return gh2_ah2_gh3_gh4(strategy,state)
    else:
        return 0
####################################################################################
def gh2_ah2_gh3_gh4(strategy,state):
    sum = 0
    for s in state._board:
        if s != '0':
            x,y = GOAL_STATE.find(s)
            i,j = state.find(s)
            if strategy == 'greedy-h3' or strategy == 'astar-h3':
                sum+=int(s)**2 * (abs(x-i) + abs(y-j))
            else:
                sum +=abs(x-i)+abs(y-j)
    return sum
#**********************************************************************************
def print_summary(results):
    if 'path' in results:
        print("found solution of length {}, cost {}".format(len(results['path']), 
                                                            results['path_cost']))
        for move, state in results['path']:
            print("  {:5} {}".format(move, state))
    else:
        print("no solution found")
    print("{} states placed on frontier, {} states expanded".format(results['frontier_count'], 
                                                                    results['expanded_count']))


############################################

if __name__ == '__main__':

    start = puzz.EightPuzzleBoard(sys.argv[1])
    method = sys.argv[2]

    print("solving puzzle {} -> {}".format(start, GOAL_STATE))
    results = solve_puzzle(start, method)
    print_summary(results)
