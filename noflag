import sys
import puzz
import pdqpq

import numpy


MAX_SEARCH_ITERS = 100000
GOAL_STATE = puzz.EightPuzzleBoard("012345678")


def solve_puzzle(start_state, strategy):

    """Perform a search to find a solution to a puzzle.
    
    Args:
        start_state: an EightPuzzleBoard object indicating the start state for the search
        flavor: a string indicating which type of search to run.  Can be one of the following:
            'bfs' - breadth-first search
            'ucost' - uniform-cost search
            'greedy-h1' - Greedy best-first search using a misplaced tile count heuristic
            'greedy-h2' - Greedy best-first search using a Manhattan distance heuristic
            'greedy-h3' - Greedy best-first search using a weighted Manhattan distance heuristic
            'astar-h1' - A* search using a misplaced tile count heuristic
            'astar-h2' - A* search using a Manhattan distance heuristic
            'astar-h3' - A* search using a weighted Manhattan distance heuristic
    
    Returns: 
        A dictionary containing describing the search performed, containing the following entries:
            'path' - a list of EightPuzzleBoard objects indicating the path from the start state 
                to the goal state (both should be included).  Omitted if the search fails.
            'path_cost' - the total cost of the path, taking into account the costs associated 
                with each state transition.  Omitted if the search fails.
            'frontier_count' - the number of unique states added to the search frontier at any
                point during the search.
            'expanded_count' - the number of unique states removed from the frontier and expanded 
                (successors generated).
    """
    # print(strategy)


    results = {
        'path': [],
        'path_cost': 0,
        'frontier_count': 0,
        'expanded_count': 0,
    }
    # 
    # fill in the function body here
    #
    if strategy == 'bfs':
        results = bfs_and_greedy(start_state,strategy,lambda x,y:0)
    elif strategy == 'ucost':
        results = ucost_and_astar(start_state, strategy, lambda x,y:0)
    elif strategy[:6] == 'greedy':
        results = bfs_and_greedy(start_state, strategy, heuristic)
    elif strategy[:5] == 'astar':
        results = ucost_and_astar(start_state, strategy, heuristic)

    return results

def bfs_and_greedy(start_state, strategy, heuristic):
    f_size = 1
    frontier, explored, trace = pdqpq.PriorityQueue(), set(), {}
    frontier.add(start_state, heuristic(strategy,start_state))
    while not frontier.empty():
        node = frontier.pop()
        if node == GOAL_STATE:
            if strategy[:6] == 'greedy': f_size+=1
            return {
                'path': [("start", start_state)],
                'path_cost': 1,
                'frontier_count': f_size,
                'expanded_count': len(explored),
            }
        explored.add(node)
        succs = node.successors()
        for n in succs:
            if (succs[n] not in frontier) and (succs[n] not in explored):
                trace[succs[n]] = (n, node)
                if succs[n] == GOAL_STATE:
                    if strategy[:6] == 'greedy': f_size+=1
                    path,total_cost = backtrace(trace, start_state)
                    return {
                        'path': path,
                        'path_cost': total_cost,
                        'frontier_count': f_size,
                        'expanded_count': len(explored),
                    } 
                else:
                    frontier.add(succs[n], heuristic(strategy,succs[n]))
                    f_size+=1
    return {
        'frontier_count': f_size,
        'expanded_count': len(explored),
    }


def ucost_and_astar(start_state, strategy, heuristic):
    f_size = 1
    frontier, explored, trace = pdqpq.PriorityQueue(), set(), {}
    frontier.add(start_state, 0)
    while not frontier.empty():
        path_cost = frontier.pq[0][0]
        node = frontier.pop()
        path_cost -= heuristic(strategy, node)
        if node == GOAL_STATE:
            path,_ = backtrace(trace, start_state)            
            return {
                'path': path,
                'path_cost': path_cost,
                'frontier_count':f_size,
                'expanded_count':len(explored),
            }
        explored.add(node)
        succs = node.successors()
        for n in succs:
            node_cost, heu_cost = cost(succs[n], node),heuristic(strategy,succs[n]) 
            if (succs[n] not in frontier) and (succs[n] not in explored):
                f_size += 1
                frontier.add(succs[n], node_cost+path_cost+heu_cost)
                trace[succs[n]] = (n, node)
            elif (succs[n] in frontier) and (frontier.get(succs[n]) >  node_cost+path_cost+heu_cost):
                frontier.entry_finder[succs[n]][0] =  node_cost+path_cost+heu_cost
                trace[succs[n]] = (n, node)
    
    return {
        'frontier_count':f_size, 
        'expanded_count': len(explored)
    }


def cost(child, parent):
    x,y = parent.find('0')
    return int(child._get_tile(x,y))**2


def backtrace(trace, start_state):
    total_cost = 0
    path = [(trace[GOAL_STATE][0],GOAL_STATE)]
    while path[-1][1] != start_state:
        temp = trace[path[-1][1]][1]
        total_cost += cost(path[-1][1],temp)
        path.append((trace[temp][0], temp)) if temp != start_state else path.append(('start', temp))   
    path.reverse()
    return path, total_cost

def heuristic(strategy,state):
    if strategy == 'greedy-h1' or strategy == 'astar-h1':
        s = '012345678'
        a = state.__str__()
        count = 0
        for i,j in zip(s,a):
            if i != '0':
                if i != j: count += 1
        
        return count
    elif strategy == 'greedy-h2' or strategy == 'astar-h2':
        sum = 0
        for i in state._board:
            if i != '0':
                x,y = GOAL_STATE.find(i)
                a,b = state.find(i)
                sum += abs(x-a) + abs(y-b)
        return sum
    elif strategy == 'greedy-h3' or strategy == 'astar-h3':
        sum = 0
        for i in state._board:
            if i != '0':
                x,y = GOAL_STATE.find(i)
                a,b = state.find(i)
                sum += int(i)**2 * (abs(x-a) + abs(y-b))
        return sum

    return 0


def print_summary(results):
    if 'path' in results:
        print("found solution of length {}, cost {}".format(len(results['path']), 
                                                            results['path_cost']))
        for move, state in results['path']:
            print("  {:5} {}".format(move, state))
    else:
        print("no solution found")
    print("{} states placed on frontier, {} states expanded".format(results['frontier_count'], 
                                                                    results['expanded_count']))


############################################

if __name__ == '__main__':

    start = puzz.EightPuzzleBoard(sys.argv[1])
    method = sys.argv[2]

    # start = puzz.EightPuzzleBoard('802356174')
    # method = 'bfs'

    print("solving puzzle {} -> {}".format(start, GOAL_STATE))
    results = solve_puzzle(start, method)
    print_summary(results)
